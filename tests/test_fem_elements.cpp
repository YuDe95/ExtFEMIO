/*
   #####     #    #     # #######   ###   ####### #     #   ###
  #     #   # #   #     #    #       #    #     # ##    #   ###
  #        #   #  #     #    #       #    #     # # #   #   ###
  #       #     # #     #    #       #    #     # #  #  #    #
  #       ####### #     #    #       #    #     # #   # #
  #     # #     # #     #    #       #    #     # #    ##   ###
   #####  #     #  #####     #      ###   ####### #     #   ###

   Automatically generated source file. Contact author if changes are
   required.
 */

/**
   \file
   \author Berthold Höllmann <berthold.hoellmann@dnvgl.com>
   \copyright Copyright © 2016 by DNV GL SE
   \brief Tests for reading and writing FEM  element information.

   Detailed description
*/

#include "extfem_misc.h"

// ID:
namespace {
   const char cID_test_fem_elements[]  _EXTFEMIO_UNUSED =
       "@(#) $Id$";
}

#define NOMINMAX // To avoid problems with "numeric_limits"

// This tells Catch to provide a main() - only do this in one cpp file
#define CATCH_CONFIG_MAIN

#include <deque>
#include <memory>

#include <catch.hpp>

#ifdef __GNUC__
#include "config.h"
#endif

#include "fem/cards.h"
#include "fem/elements.h"

#if defined(__AFX_H__) && defined(_DEBUG)
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

using namespace std;

using namespace dnvgl::extfem::fem;

TEST_CASE("Basic test", "[fem_elemsnts_basic]") {
   elements::__base::elem::reset();
   vector<long> nodes({ 6, 7 });
   cards::gelmnt1 data1(19999, 29999, elements::el_types::TESS, nodes);

   SECTION("check values") {
       CHECK(data1.ELNOX == 19999);
       CHECK(data1.ELNO == 29999);
       CHECK(data1.ELTYP == elements::el_types::TESS);
       CHECK(data1.NODIN.size() == 2);
       CHECK(data1.NODIN[0] == 6);
       CHECK(data1.NODIN[1] == 7);
   }

   SECTION("check copy") {
       elements::tess probe1(&data1);
       CHECK(probe1.get_type() == elements::el_types::TESS);
       CHECK(probe1.nnodes() == 2);
       CHECK(probe1.nodes.size() == 2);
       CHECK(probe1.nodes[0] == 6);
       CHECK(probe1.nodes[1] == 7);
   }

   SECTION("check downcast") {
       elements::__base::elem::reset();
       unique_ptr<elements::__base::elem> probe2;
       elements::dispatch(probe2, &data1);
       CHECK(probe2->get_type() == elements::el_types::TESS);
       CHECK(static_cast<elements::tess*>(probe2.get())->nnodes() == 2);
   }
}

TEST_CASE("Mapping of element types to names.", "[fem_element]") {
    
    SECTION("INVALID") {
        CHECK(name_elem(elements::el_types::INVALID) == "INVALID");
    }

    SECTION("UNDEFINED") {
        CHECK(name_elem(elements::el_types::UNDEFINED) == "UNDEFINED");
    }
}
TEST_CASE("FEM BEPS element definitions.", "[fem_element_beps]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::BEPS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::beps probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for BEPS elements.", "[fem_element_beps]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::beps probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::beps probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::beps probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::beps probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::beps probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::beps probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.000000000e+00+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CSTA element definitions.", "[fem_element_csta]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CSTA;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::csta probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CSTA elements.", "[fem_element_csta]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::csta probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::csta probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::csta probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::csta probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::csta probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::csta probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.000000000e+00+3.000000000e+00\n"
            "        +1.030000000e+02+1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM RPBQ element definitions.", "[fem_element_rpbq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::RPBQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::rpbq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for RPBQ elements.", "[fem_element_rpbq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::rpbq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::rpbq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::rpbq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::rpbq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::rpbq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::rpbq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.000000000e+00+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM ILST element definitions.", "[fem_element_ilst]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::ILST;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ilst probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for ILST elements.", "[fem_element_ilst]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ilst probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ilst probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+6.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ilst probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+6.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ilst probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+6.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ilst probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ilst probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+6.000000000e+00+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM IQQE element definitions.", "[fem_element_iqqe]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::IQQE;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::iqqe probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for IQQE elements.", "[fem_element_iqqe]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::iqqe probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::iqqe probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+8.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::iqqe probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+8.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::iqqe probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+8.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::iqqe probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+8.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::iqqe probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+8.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+8.000000000e+00+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM LQUA element definitions.", "[fem_element_lqua]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::LQUA;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::lqua probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for LQUA elements.", "[fem_element_lqua]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::lqua probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::lqua probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+9.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::lqua probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+9.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::lqua probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+9.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::lqua probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+9.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::lqua probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+9.000000000e+00+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+9.000000000e+00+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM TESS element definitions.", "[fem_element_tess]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::TESS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::tess probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for TESS elements.", "[fem_element_tess]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::tess probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::tess probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::tess probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::tess probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::tess probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::tess probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.000000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GMAS element definitions.", "[fem_element_gmas]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GMAS;
    long const ELTYAD = 2;
    vector<long> const NODIN (1, 100);
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::gmas probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GMAS elements.", "[fem_element_gmas]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::gmas probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::gmas probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::gmas probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::gmas probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::gmas probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>(1, 100),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::gmas probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 101), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.100000000e+01+3.000000000e+00\n"
            "        +1.010000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GLMA element definitions.", "[fem_element_glma]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GLMA;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::glma probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GLMA elements.", "[fem_element_glma]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::glma probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::glma probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::glma probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::glma probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::glma probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::glma probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.200000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GLDA element definitions.", "[fem_element_glda]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GLDA;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::glda probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GLDA elements.", "[fem_element_glda]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::glda probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::glda probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::glda probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::glda probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::glda probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::glda probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.300000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM BEAS element definitions.", "[fem_element_beas]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::BEAS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::beas probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Framework, elements::el_processor::Launch, elements::el_processor::Platework, elements::el_processor::Pretube, elements::el_processor::Wadam, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for BEAS elements.", "[fem_element_beas]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::beas probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::beas probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::beas probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::beas probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::beas probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::beas probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.500000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM AXIS element definitions.", "[fem_element_axis]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::AXIS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::axis probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Framework, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for AXIS elements.", "[fem_element_axis]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::axis probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::axis probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::axis probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::axis probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::axis probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::axis probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.600000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM AXDA element definitions.", "[fem_element_axda]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::AXDA;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::axda probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for AXDA elements.", "[fem_element_axda]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::axda probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::axda probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::axda probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::axda probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::axda probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::axda probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.700000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GSPR element definitions.", "[fem_element_gspr]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GSPR;
    long const ELTYAD = 2;
    vector<long> const NODIN (1, 100);
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::gspr probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Framework, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GSPR elements.", "[fem_element_gspr]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::gspr probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::gspr probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::gspr probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::gspr probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::gspr probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>(1, 100),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::gspr probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 101), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.800000000e+01+3.000000000e+00\n"
            "        +1.010000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GDAM element definitions.", "[fem_element_gdam]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GDAM;
    long const ELTYAD = 2;
    vector<long> const NODIN (1, 100);
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::gdam probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GDAM elements.", "[fem_element_gdam]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::gdam probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::gdam probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::gdam probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::gdam probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::gdam probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>(1, 100),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::gdam probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 101), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.900000000e+01+3.000000000e+00\n"
            "        +1.010000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM IHEX element definitions.", "[fem_element_ihex]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::IHEX;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ihex probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Framework }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for IHEX elements.", "[fem_element_ihex]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ihex probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ihex probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ihex probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ihex probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ihex probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ihex probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.000000000e+01+3.000000000e+00\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM LHEX element definitions.", "[fem_element_lhex]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::LHEX;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::lhex probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Framework }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for LHEX elements.", "[fem_element_lhex]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::lhex probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::lhex probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::lhex probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::lhex probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::lhex probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::lhex probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.100000000e+01+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM SECB element definitions.", "[fem_element_secb]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::SECB;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::secb probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for SECB elements.", "[fem_element_secb]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::secb probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::secb probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::secb probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::secb probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::secb probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::secb probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.200000000e+01+3.000000000e+00\n"
            "        +1.030000000e+02+1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM BTSS element definitions.", "[fem_element_btss]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::BTSS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::btss probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::Platework, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for BTSS elements.", "[fem_element_btss]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::btss probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::btss probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::btss probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::btss probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::btss probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::btss probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.300000000e+01+3.000000000e+00\n"
            "        +1.030000000e+02+1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM FQUS_FFQ element definitions.", "[fem_element_fqus_ffq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::FQUS_FFQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::fqus_ffq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Platework, elements::el_processor::Pretube, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for FQUS_FFQ elements.", "[fem_element_fqus_ffq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::fqus_ffq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::fqus_ffq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::fqus_ffq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::fqus_ffq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::fqus_ffq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::fqus_ffq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.400000000e+01+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM FTRS_FFTR element definitions.", "[fem_element_ftrs_fftr]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::FTRS_FFTR;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ftrs_fftr probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE, elements::el_processor::Platework, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for FTRS_FFTR elements.", "[fem_element_ftrs_fftr]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ftrs_fftr probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ftrs_fftr probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ftrs_fftr probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ftrs_fftr probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ftrs_fftr probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ftrs_fftr probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.500000000e+01+3.000000000e+00\n"
            "        +1.030000000e+02+1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM SCTS element definitions.", "[fem_element_scts]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::SCTS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::scts probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::Platework }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for SCTS elements.", "[fem_element_scts]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::scts probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::scts probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::scts probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::scts probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::scts probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::scts probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.600000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM MCTS element definitions.", "[fem_element_mcts]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::MCTS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::mcts probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for MCTS elements.", "[fem_element_mcts]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::mcts probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::mcts probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::mcts probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::mcts probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::mcts probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::mcts probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.700000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM SCQS element definitions.", "[fem_element_scqs]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::SCQS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::scqs probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::Platework, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for SCQS elements.", "[fem_element_scqs]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::scqs probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::scqs probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::scqs probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::scqs probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::scqs probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::scqs probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.800000000e+01+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM MCQS element definitions.", "[fem_element_mcqs]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::MCQS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::mcqs probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for MCQS elements.", "[fem_element_mcqs]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::mcqs probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::mcqs probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+2.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::mcqs probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+2.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::mcqs probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+2.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::mcqs probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::mcqs probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+2.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+2.900000000e+01+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM IPRI element definitions.", "[fem_element_ipri]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::IPRI;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ipri probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for IPRI elements.", "[fem_element_ipri]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ipri probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ipri probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ipri probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ipri probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ipri probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ipri probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.000000000e+01+3.000000000e+00\n"
            "        +1.150000000e+02+1.160000000e+02+1.170000000e+02+1.180000000e+02\n"
            "        +1.190000000e+02+1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM ITET element definitions.", "[fem_element_itet]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::ITET;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::itet probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for ITET elements.", "[fem_element_itet]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::itet probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::itet probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::itet probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::itet probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::itet probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::itet probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({110, 111, 112, 113, 114, 115, 116, 117, 118, 119}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.100000000e+01+3.000000000e+00\n"
            "        +1.100000000e+02+1.110000000e+02+1.120000000e+02+1.130000000e+02\n"
            "        +1.140000000e+02+1.150000000e+02+1.160000000e+02+1.170000000e+02\n"
            "        +1.180000000e+02+1.190000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM TPRI element definitions.", "[fem_element_tpri]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::TPRI;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::tpri probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::Platework }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for TPRI elements.", "[fem_element_tpri]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::tpri probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::tpri probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::tpri probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::tpri probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::tpri probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::tpri probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.200000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM TETR element definitions.", "[fem_element_tetr]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::TETR;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::tetr probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for TETR elements.", "[fem_element_tetr]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::tetr probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::tetr probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::tetr probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::tetr probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::tetr probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::tetr probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.300000000e+01+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM LCTS element definitions.", "[fem_element_lcts]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::LCTS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::lcts probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for LCTS elements.", "[fem_element_lcts]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::lcts probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::lcts probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::lcts probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::lcts probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::lcts probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::lcts probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.400000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM LCQS element definitions.", "[fem_element_lcqs]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::LCQS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::lcqs probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for LCQS elements.", "[fem_element_lcqs]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::lcqs probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::lcqs probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::lcqs probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::lcqs probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::lcqs probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::lcqs probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.500000000e+01+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM TRS1 element definitions.", "[fem_element_trs1]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::TRS1;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::trs1 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for TRS1 elements.", "[fem_element_trs1]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::trs1 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::trs1 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::trs1 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::trs1 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::trs1 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::trs1 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.600000000e+01+3.000000000e+00\n"
            "        +1.180000000e+02+1.190000000e+02+1.200000000e+02+1.210000000e+02\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM TRS2 element definitions.", "[fem_element_trs2]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::TRS2;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::trs2 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for TRS2 elements.", "[fem_element_trs2]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::trs2 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::trs2 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::trs2 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::trs2 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::trs2 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::trs2 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.700000000e+01+3.000000000e+00\n"
            "        +1.150000000e+02+1.160000000e+02+1.170000000e+02+1.180000000e+02\n"
            "        +1.190000000e+02+1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM TRS3 element definitions.", "[fem_element_trs3]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::TRS3;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::trs3 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for TRS3 elements.", "[fem_element_trs3]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::trs3 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::trs3 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+3.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::trs3 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+3.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::trs3 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+3.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::trs3 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::trs3 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+3.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+3.800000000e+01+3.000000000e+00\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GLSH element definitions.", "[fem_element_glsh]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GLSH;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::glsh probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::Sestra, elements::el_processor::Poseidon }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GLSH elements.", "[fem_element_glsh]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::glsh probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::glsh probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::glsh probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::glsh probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::glsh probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::glsh probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.000000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM AXCS element definitions.", "[fem_element_axcs]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::AXCS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::axcs probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for AXCS elements.", "[fem_element_axcs]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::axcs probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::axcs probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::axcs probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::axcs probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::axcs probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::axcs probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.100000000e+01+3.000000000e+00\n"
            "        +1.030000000e+02+1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM AXLQ element definitions.", "[fem_element_axlq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::AXLQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::axlq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for AXLQ elements.", "[fem_element_axlq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::axlq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::axlq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::axlq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::axlq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::axlq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::axlq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.200000000e+01+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM AXLS element definitions.", "[fem_element_axls]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::AXLS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::axls probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for AXLS elements.", "[fem_element_axls]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::axls probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::axls probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::axls probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::axls probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::axls probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::axls probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.300000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM AXQQ element definitions.", "[fem_element_axqq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::AXQQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::axqq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for AXQQ elements.", "[fem_element_axqq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::axqq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::axqq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::axqq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::axqq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::axqq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::axqq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.400000000e+01+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM PILS element definitions.", "[fem_element_pils]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::PILS;
    long const ELTYAD = 2;
    vector<long> const NODIN (1, 100);
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::pils probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for PILS elements.", "[fem_element_pils]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::pils probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::pils probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::pils probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::pils probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::pils probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>(1, 100),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::pils probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 101), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.500000000e+01+3.000000000e+00\n"
            "        +1.010000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM PCAB element definitions.", "[fem_element_pcab]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::PCAB;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::pcab probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for PCAB elements.", "[fem_element_pcab]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::pcab probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::pcab probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::pcab probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::pcab probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::pcab probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::pcab probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.600000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM PSPR element definitions.", "[fem_element_pspr]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::PSPR;
    long const ELTYAD = 2;
    vector<long> const NODIN (1, 100);
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::pspr probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Preframe, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for PSPR elements.", "[fem_element_pspr]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::pspr probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::pspr probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::pspr probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>(1, 100), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::pspr probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::pspr probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>(1, 100),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::pspr probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 100), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>(1, 101), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.700000000e+01+3.000000000e+00\n"
            "        +1.010000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM ADVA_4 element definitions.", "[fem_element_adva_4]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::ADVA_4;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::adva_4 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for ADVA_4 elements.", "[fem_element_adva_4]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::adva_4 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::adva_4 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::adva_4 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::adva_4 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::adva_4 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::adva_4 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.800000000e+01+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM ADVA_2 element definitions.", "[fem_element_adva_2]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::ADVA_2;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::adva_2 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::ADVANCE }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for ADVA_2 elements.", "[fem_element_adva_2]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::adva_2 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::adva_2 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+4.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::adva_2 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+4.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::adva_2 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+4.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::adva_2 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::adva_2 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+4.900000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+4.900000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTCP element definitions.", "[fem_element_ctcp]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTCP;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctcp probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTCP elements.", "[fem_element_ctcp]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctcp probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctcp probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctcp probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctcp probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctcp probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctcp probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.100000000e+01+3.000000000e+00\n"
            "        +1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTCL element definitions.", "[fem_element_ctcl]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTCL;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctcl probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTCL elements.", "[fem_element_ctcl]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctcl probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctcl probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctcl probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctcl probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctcl probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctcl probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.200000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.200000000e+01+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTAL element definitions.", "[fem_element_ctal]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTAL;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctal probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTAL elements.", "[fem_element_ctal]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctal probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctal probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctal probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctal probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctal probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctal probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.300000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.300000000e+01+3.000000000e+00\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTCC element definitions.", "[fem_element_ctcc]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTCC;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctcc probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTCC elements.", "[fem_element_ctcc]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctcc probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctcc probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctcc probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctcc probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctcc probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctcc probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.400000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.400000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTAQ element definitions.", "[fem_element_ctaq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTAQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctaq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTAQ elements.", "[fem_element_ctaq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctaq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctaq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctaq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctaq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctaq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctaq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.500000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.500000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTLQ element definitions.", "[fem_element_ctlq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTLQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctlq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTLQ elements.", "[fem_element_ctlq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctlq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctlq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctlq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctlq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctlq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctlq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.600000000e+01+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTCQ element definitions.", "[fem_element_ctcq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTCQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctcq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTCQ elements.", "[fem_element_ctcq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctcq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctcq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctcq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctcq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctcq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctcq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.700000000e+01+3.000000000e+00\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM CTMQ element definitions.", "[fem_element_ctmq]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::CTMQ;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ctmq probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for CTMQ elements.", "[fem_element_ctmq]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ctmq probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ctmq probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+5.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ctmq probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+5.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ctmq probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+5.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ctmq probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ctmq probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+5.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+5.800000000e+01+3.000000000e+00\n"
            "        +1.180000000e+02+1.190000000e+02+1.200000000e+02+1.210000000e+02\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM HCQS element definitions.", "[fem_element_hcqs]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::HCQS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::hcqs probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Prefem, elements::el_processor::Pretube }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for HCQS elements.", "[fem_element_hcqs]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::hcqs probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::hcqs probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+6.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::hcqs probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+6.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::hcqs probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+6.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::hcqs probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::hcqs probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({109, 110, 111, 112, 113, 114, 115, 116, 117}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.100000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+6.100000000e+01+3.000000000e+00\n"
            "        +1.090000000e+02+1.100000000e+02+1.110000000e+02+1.120000000e+02\n"
            "        +1.130000000e+02+1.140000000e+02+1.150000000e+02+1.160000000e+02\n"
            "        +1.170000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM SLQS element definitions.", "[fem_element_slqs]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::SLQS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::slqs probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for SLQS elements.", "[fem_element_slqs]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::slqs probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::slqs probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+6.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::slqs probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+6.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::slqs probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+6.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::slqs probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::slqs probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({108, 109, 110, 111, 112, 113, 114, 115}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.600000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+6.600000000e+01+3.000000000e+00\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM SLTS element definitions.", "[fem_element_slts]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::SLTS;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::slts probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for SLTS elements.", "[fem_element_slts]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::slts probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::slts probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+6.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::slts probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+6.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::slts probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+6.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::slts probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::slts probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({106, 107, 108, 109, 110, 111}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.700000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+6.700000000e+01+3.000000000e+00\n"
            "        +1.060000000e+02+1.070000000e+02+1.080000000e+02+1.090000000e+02\n"
            "        +1.100000000e+02+1.110000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM SLCB element definitions.", "[fem_element_slcb]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::SLCB;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::slcb probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for SLCB elements.", "[fem_element_slcb]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::slcb probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::slcb probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+6.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::slcb probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+6.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::slcb probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+6.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::slcb probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::slcb probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({103, 104, 105}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+6.800000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+6.800000000e+01+3.000000000e+00\n"
            "        +1.030000000e+02+1.040000000e+02+1.050000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM MATR element definitions.", "[fem_element_matr]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::MATR;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::matr probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::ADVANCE, elements::el_processor::Splice }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for MATR elements.", "[fem_element_matr]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::matr probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::matr probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+7.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "        +1.480000000e+02+1.490000000e+02+1.500000000e+02+1.510000000e+02\n"
            "        +1.520000000e+02+1.530000000e+02+1.540000000e+02+1.550000000e+02\n"
            "        +1.560000000e+02+1.570000000e+02+1.580000000e+02+1.590000000e+02\n"
            "        +1.600000000e+02+1.610000000e+02+1.620000000e+02+1.630000000e+02\n"
            "        +1.640000000e+02+1.650000000e+02+1.660000000e+02+1.670000000e+02\n"
            "        +1.680000000e+02+1.690000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::matr probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+7.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "        +1.480000000e+02+1.490000000e+02+1.500000000e+02+1.510000000e+02\n"
            "        +1.520000000e+02+1.530000000e+02+1.540000000e+02+1.550000000e+02\n"
            "        +1.560000000e+02+1.570000000e+02+1.580000000e+02+1.590000000e+02\n"
            "        +1.600000000e+02+1.610000000e+02+1.620000000e+02+1.630000000e+02\n"
            "        +1.640000000e+02+1.650000000e+02+1.660000000e+02+1.670000000e+02\n"
            "        +1.680000000e+02+1.690000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::matr probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+7.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "        +1.480000000e+02+1.490000000e+02+1.500000000e+02+1.510000000e+02\n"
            "        +1.520000000e+02+1.530000000e+02+1.540000000e+02+1.550000000e+02\n"
            "        +1.560000000e+02+1.570000000e+02+1.580000000e+02+1.590000000e+02\n"
            "        +1.600000000e+02+1.610000000e+02+1.620000000e+02+1.630000000e+02\n"
            "        +1.640000000e+02+1.650000000e+02+1.660000000e+02+1.670000000e+02\n"
            "        +1.680000000e+02+1.690000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::matr probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+7.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "        +1.480000000e+02+1.490000000e+02+1.500000000e+02+1.510000000e+02\n"
            "        +1.520000000e+02+1.530000000e+02+1.540000000e+02+1.550000000e+02\n"
            "        +1.560000000e+02+1.570000000e+02+1.580000000e+02+1.590000000e+02\n"
            "        +1.600000000e+02+1.610000000e+02+1.620000000e+02+1.630000000e+02\n"
            "        +1.640000000e+02+1.650000000e+02+1.660000000e+02+1.670000000e+02\n"
            "        +1.680000000e+02+1.690000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::matr probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+7.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "        +1.480000000e+02+1.490000000e+02+1.500000000e+02+1.510000000e+02\n"
            "        +1.520000000e+02+1.530000000e+02+1.540000000e+02+1.550000000e+02\n"
            "        +1.560000000e+02+1.570000000e+02+1.580000000e+02+1.590000000e+02\n"
            "        +1.600000000e+02+1.610000000e+02+1.620000000e+02+1.630000000e+02\n"
            "        +1.640000000e+02+1.650000000e+02+1.660000000e+02+1.670000000e+02\n"
            "        +1.680000000e+02+1.690000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+7.000000000e+01+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "        +1.480000000e+02+1.490000000e+02+1.500000000e+02+1.510000000e+02\n"
            "        +1.520000000e+02+1.530000000e+02+1.540000000e+02+1.550000000e+02\n"
            "        +1.560000000e+02+1.570000000e+02+1.580000000e+02+1.590000000e+02\n"
            "        +1.600000000e+02+1.610000000e+02+1.620000000e+02+1.630000000e+02\n"
            "        +1.640000000e+02+1.650000000e+02+1.660000000e+02+1.670000000e+02\n"
            "        +1.680000000e+02+1.690000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX100 element definitions.", "[fem_element_ghex100]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX100;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex100 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX100 elements.", "[fem_element_ghex100]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex100 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex100 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.000000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex100 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.000000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex100 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.000000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex100 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.000000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex100 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.000000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.000000000e+02+3.000000000e+00\n"
            "        +1.210000000e+02+1.220000000e+02+1.230000000e+02+1.240000000e+02\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX101 element definitions.", "[fem_element_ghex101]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX101;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex101 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX101 elements.", "[fem_element_ghex101]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex101 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex101 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.010000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex101 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.010000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex101 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.010000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex101 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.010000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex101 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.010000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.010000000e+02+3.000000000e+00\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX102 element definitions.", "[fem_element_ghex102]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX102;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex102 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX102 elements.", "[fem_element_ghex102]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex102 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex102 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.020000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex102 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.020000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex102 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.020000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex102 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.020000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex102 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.020000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.020000000e+02+3.000000000e+00\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX103 element definitions.", "[fem_element_ghex103]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX103;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex103 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX103 elements.", "[fem_element_ghex103]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex103 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex103 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.030000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex103 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.030000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex103 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.030000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex103 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.030000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex103 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.030000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.030000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX104 element definitions.", "[fem_element_ghex104]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX104;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex104 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX104 elements.", "[fem_element_ghex104]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex104 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex104 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.040000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex104 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.040000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex104 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.040000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex104 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.040000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex104 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.040000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.040000000e+02+3.000000000e+00\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX105 element definitions.", "[fem_element_ghex105]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX105;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex105 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX105 elements.", "[fem_element_ghex105]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex105 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex105 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.050000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex105 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.050000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex105 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.050000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex105 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.050000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex105 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.050000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.050000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX106 element definitions.", "[fem_element_ghex106]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX106;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex106 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX106 elements.", "[fem_element_ghex106]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex106 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex106 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.060000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex106 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.060000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex106 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.060000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex106 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.060000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex106 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.060000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.060000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX107 element definitions.", "[fem_element_ghex107]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX107;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex107 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX107 elements.", "[fem_element_ghex107]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex107 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex107 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.070000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex107 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.070000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex107 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.070000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex107 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.070000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex107 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.070000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.070000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX108 element definitions.", "[fem_element_ghex108]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX108;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex108 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX108 elements.", "[fem_element_ghex108]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex108 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex108 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.080000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex108 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.080000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex108 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.080000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex108 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.080000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex108 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.080000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.080000000e+02+3.000000000e+00\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX109 element definitions.", "[fem_element_ghex109]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX109;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex109 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX109 elements.", "[fem_element_ghex109]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex109 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex109 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.090000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex109 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.090000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex109 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.090000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex109 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.090000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex109 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.090000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.090000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX110 element definitions.", "[fem_element_ghex110]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX110;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex110 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX110 elements.", "[fem_element_ghex110]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex110 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex110 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.100000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex110 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.100000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex110 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.100000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex110 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.100000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex110 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.100000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.100000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX111 element definitions.", "[fem_element_ghex111]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX111;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex111 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX111 elements.", "[fem_element_ghex111]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex111 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex111 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.110000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex111 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.110000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex111 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.110000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex111 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.110000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex111 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.110000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.110000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX112 element definitions.", "[fem_element_ghex112]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX112;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex112 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX112 elements.", "[fem_element_ghex112]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex112 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex112 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.120000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex112 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.120000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex112 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.120000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex112 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.120000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex112 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.120000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.120000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX113 element definitions.", "[fem_element_ghex113]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX113;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex113 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX113 elements.", "[fem_element_ghex113]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex113 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex113 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.130000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex113 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.130000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex113 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.130000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex113 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.130000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex113 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.130000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.130000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX114 element definitions.", "[fem_element_ghex114]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX114;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex114 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX114 elements.", "[fem_element_ghex114]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex114 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex114 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.140000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex114 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.140000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex114 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.140000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex114 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.140000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex114 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.140000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.140000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX115 element definitions.", "[fem_element_ghex115]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX115;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex115 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX115 elements.", "[fem_element_ghex115]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex115 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex115 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.150000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex115 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.150000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex115 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.150000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex115 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.150000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex115 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.150000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.150000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX116 element definitions.", "[fem_element_ghex116]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX116;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex116 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX116 elements.", "[fem_element_ghex116]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex116 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex116 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.160000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex116 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.160000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex116 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.160000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex116 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.160000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex116 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.160000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.160000000e+02+3.000000000e+00\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX117 element definitions.", "[fem_element_ghex117]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX117;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex117 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX117 elements.", "[fem_element_ghex117]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex117 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex117 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.170000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex117 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.170000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex117 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.170000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex117 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.170000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex117 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.170000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.170000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX118 element definitions.", "[fem_element_ghex118]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX118;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex118 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX118 elements.", "[fem_element_ghex118]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex118 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex118 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.180000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex118 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.180000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex118 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.180000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex118 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.180000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex118 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.180000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.180000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX119 element definitions.", "[fem_element_ghex119]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX119;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex119 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX119 elements.", "[fem_element_ghex119]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex119 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex119 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.190000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex119 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.190000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex119 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.190000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex119 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.190000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex119 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.190000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.190000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX120 element definitions.", "[fem_element_ghex120]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX120;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex120 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX120 elements.", "[fem_element_ghex120]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex120 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex120 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.200000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex120 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.200000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex120 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.200000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex120 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.200000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex120 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.200000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.200000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX121 element definitions.", "[fem_element_ghex121]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX121;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex121 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX121 elements.", "[fem_element_ghex121]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex121 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex121 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.210000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex121 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.210000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex121 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.210000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex121 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.210000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex121 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.210000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.210000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX122 element definitions.", "[fem_element_ghex122]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX122;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex122 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX122 elements.", "[fem_element_ghex122]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex122 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex122 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.220000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex122 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.220000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex122 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.220000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex122 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.220000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex122 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.220000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.220000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX123 element definitions.", "[fem_element_ghex123]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX123;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex123 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX123 elements.", "[fem_element_ghex123]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex123 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex123 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.230000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex123 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.230000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex123 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.230000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex123 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.230000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex123 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.230000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.230000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX124 element definitions.", "[fem_element_ghex124]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX124;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex124 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX124 elements.", "[fem_element_ghex124]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex124 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex124 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.240000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex124 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.240000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex124 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.240000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex124 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.240000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex124 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.240000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.240000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX125 element definitions.", "[fem_element_ghex125]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX125;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex125 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX125 elements.", "[fem_element_ghex125]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex125 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex125 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.250000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex125 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.250000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex125 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.250000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex125 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.250000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex125 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.250000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.250000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX126 element definitions.", "[fem_element_ghex126]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX126;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex126 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX126 elements.", "[fem_element_ghex126]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex126 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex126 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.260000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex126 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.260000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex126 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.260000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex126 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.260000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex126 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.260000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.260000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX127 element definitions.", "[fem_element_ghex127]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX127;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex127 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX127 elements.", "[fem_element_ghex127]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex127 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex127 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.270000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex127 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.270000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex127 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.270000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex127 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.270000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex127 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.270000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.270000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX128 element definitions.", "[fem_element_ghex128]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX128;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex128 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX128 elements.", "[fem_element_ghex128]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex128 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex128 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.280000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex128 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.280000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex128 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.280000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex128 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.280000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex128 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.280000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.280000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX129 element definitions.", "[fem_element_ghex129]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX129;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex129 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX129 elements.", "[fem_element_ghex129]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex129 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex129 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.290000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex129 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.290000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex129 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.290000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex129 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.290000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex129 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.290000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.290000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX130 element definitions.", "[fem_element_ghex130]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX130;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex130 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX130 elements.", "[fem_element_ghex130]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex130 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex130 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.300000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex130 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.300000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex130 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.300000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex130 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.300000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex130 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.300000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.300000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX131 element definitions.", "[fem_element_ghex131]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX131;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex131 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX131 elements.", "[fem_element_ghex131]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex131 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex131 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.310000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex131 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.310000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex131 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.310000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex131 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.310000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex131 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.310000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.310000000e+02+3.000000000e+00\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "        +1.460000000e+02+1.470000000e+02+1.480000000e+02+1.490000000e+02\n"
            "        +1.500000000e+02+1.510000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX132 element definitions.", "[fem_element_ghex132]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX132;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex132 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX132 elements.", "[fem_element_ghex132]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex132 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex132 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.320000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex132 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.320000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex132 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.320000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex132 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.320000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex132 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.320000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.320000000e+02+3.000000000e+00\n"
            "        +1.220000000e+02+1.230000000e+02+1.240000000e+02+1.250000000e+02\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX133 element definitions.", "[fem_element_ghex133]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX133;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex133 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX133 elements.", "[fem_element_ghex133]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex133 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex133 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.330000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex133 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.330000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex133 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.330000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex133 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.330000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex133 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.330000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.330000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX134 element definitions.", "[fem_element_ghex134]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX134;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex134 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX134 elements.", "[fem_element_ghex134]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex134 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex134 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.340000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex134 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.340000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex134 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.340000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex134 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.340000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex134 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.340000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.340000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX135 element definitions.", "[fem_element_ghex135]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX135;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex135 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX135 elements.", "[fem_element_ghex135]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex135 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex135 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.350000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex135 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.350000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex135 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.350000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex135 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.350000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex135 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.350000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.350000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX136 element definitions.", "[fem_element_ghex136]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX136;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex136 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX136 elements.", "[fem_element_ghex136]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex136 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex136 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.360000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex136 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.360000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex136 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.360000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex136 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.360000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex136 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.360000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.360000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX137 element definitions.", "[fem_element_ghex137]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX137;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex137 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX137 elements.", "[fem_element_ghex137]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex137 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex137 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.370000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex137 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.370000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex137 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.370000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex137 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.370000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex137 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.370000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.370000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX138 element definitions.", "[fem_element_ghex138]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX138;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex138 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX138 elements.", "[fem_element_ghex138]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex138 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex138 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.380000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex138 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.380000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex138 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.380000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex138 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.380000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex138 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.380000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.380000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX139 element definitions.", "[fem_element_ghex139]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX139;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex139 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX139 elements.", "[fem_element_ghex139]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex139 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex139 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.390000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex139 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.390000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex139 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.390000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex139 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.390000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex139 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.390000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.390000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX140 element definitions.", "[fem_element_ghex140]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX140;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex140 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX140 elements.", "[fem_element_ghex140]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex140 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex140 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.400000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex140 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.400000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex140 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.400000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex140 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.400000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex140 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.400000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.400000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX141 element definitions.", "[fem_element_ghex141]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX141;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex141 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX141 elements.", "[fem_element_ghex141]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex141 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex141 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.410000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex141 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.410000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex141 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.410000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex141 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.410000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex141 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.410000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.410000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX142 element definitions.", "[fem_element_ghex142]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX142;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex142 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX142 elements.", "[fem_element_ghex142]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex142 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex142 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.420000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex142 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.420000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex142 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.420000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex142 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.420000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex142 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.420000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.420000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX143 element definitions.", "[fem_element_ghex143]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX143;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex143 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX143 elements.", "[fem_element_ghex143]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex143 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex143 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.430000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex143 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.430000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex143 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.430000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex143 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.430000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex143 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.430000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.430000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX144 element definitions.", "[fem_element_ghex144]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX144;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex144 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX144 elements.", "[fem_element_ghex144]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex144 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex144 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.440000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex144 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.440000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex144 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.440000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex144 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.440000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex144 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.440000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.440000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX145 element definitions.", "[fem_element_ghex145]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX145;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex145 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX145 elements.", "[fem_element_ghex145]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex145 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex145 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.450000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex145 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.450000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex145 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.450000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex145 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.450000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex145 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.450000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.450000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX146 element definitions.", "[fem_element_ghex146]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX146;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex146 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX146 elements.", "[fem_element_ghex146]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex146 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex146 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.460000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex146 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.460000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex146 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.460000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex146 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.460000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex146 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.460000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.460000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX147 element definitions.", "[fem_element_ghex147]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX147;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex147 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX147 elements.", "[fem_element_ghex147]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex147 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex147 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.470000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex147 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.470000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex147 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.470000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex147 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.470000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex147 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.470000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.470000000e+02+3.000000000e+00\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "        +1.460000000e+02+1.470000000e+02+1.480000000e+02+1.490000000e+02\n"
            "        +1.500000000e+02+1.510000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX148 element definitions.", "[fem_element_ghex148]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX148;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex148 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX148 elements.", "[fem_element_ghex148]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex148 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex148 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.480000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex148 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.480000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex148 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.480000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex148 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.480000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex148 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.480000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.480000000e+02+3.000000000e+00\n"
            "        +1.230000000e+02+1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX149 element definitions.", "[fem_element_ghex149]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX149;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex149 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX149 elements.", "[fem_element_ghex149]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex149 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex149 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.490000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex149 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.490000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex149 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.490000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex149 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.490000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex149 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.490000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.490000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX150 element definitions.", "[fem_element_ghex150]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX150;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex150 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX150 elements.", "[fem_element_ghex150]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex150 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex150 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.500000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex150 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.500000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex150 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.500000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex150 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.500000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex150 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.500000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.500000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX151 element definitions.", "[fem_element_ghex151]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX151;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex151 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX151 elements.", "[fem_element_ghex151]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex151 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex151 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.510000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex151 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.510000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex151 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.510000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex151 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.510000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex151 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.510000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.510000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX152 element definitions.", "[fem_element_ghex152]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX152;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex152 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX152 elements.", "[fem_element_ghex152]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex152 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex152 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.520000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex152 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.520000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex152 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.520000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex152 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.520000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex152 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.520000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.520000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX153 element definitions.", "[fem_element_ghex153]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX153;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex153 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX153 elements.", "[fem_element_ghex153]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex153 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex153 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.530000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex153 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.530000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex153 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.530000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex153 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.530000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex153 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.530000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.530000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX154 element definitions.", "[fem_element_ghex154]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX154;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex154 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX154 elements.", "[fem_element_ghex154]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex154 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex154 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.540000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex154 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.540000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex154 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.540000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex154 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.540000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex154 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.540000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.540000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX155 element definitions.", "[fem_element_ghex155]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX155;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex155 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX155 elements.", "[fem_element_ghex155]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex155 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex155 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.550000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex155 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.550000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex155 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.550000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex155 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.550000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex155 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.550000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.550000000e+02+3.000000000e+00\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "        +1.460000000e+02+1.470000000e+02+1.480000000e+02+1.490000000e+02\n"
            "        +1.500000000e+02+1.510000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX156 element definitions.", "[fem_element_ghex156]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX156;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex156 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX156 elements.", "[fem_element_ghex156]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex156 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex156 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.560000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex156 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.560000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex156 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.560000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex156 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.560000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex156 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.560000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.560000000e+02+3.000000000e+00\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02+1.270000000e+02\n"
            "        +1.280000000e+02+1.290000000e+02+1.300000000e+02+1.310000000e+02\n"
            "        +1.320000000e+02+1.330000000e+02+1.340000000e+02+1.350000000e+02\n"
            "        +1.360000000e+02+1.370000000e+02+1.380000000e+02+1.390000000e+02\n"
            "        +1.400000000e+02+1.410000000e+02+1.420000000e+02+1.430000000e+02\n"
            "        +1.440000000e+02+1.450000000e+02+1.460000000e+02+1.470000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX157 element definitions.", "[fem_element_ghex157]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX157;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex157 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX157 elements.", "[fem_element_ghex157]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex157 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex157 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.570000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex157 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.570000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex157 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.570000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex157 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.570000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex157 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.570000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.570000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX158 element definitions.", "[fem_element_ghex158]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX158;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex158 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX158 elements.", "[fem_element_ghex158]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex158 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex158 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.580000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex158 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.580000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex158 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.580000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex158 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.580000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex158 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.580000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.580000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX159 element definitions.", "[fem_element_ghex159]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX159;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex159 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX159 elements.", "[fem_element_ghex159]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex159 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex159 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.590000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex159 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.590000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex159 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.590000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex159 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.590000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex159 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.590000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.590000000e+02+3.000000000e+00\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "        +1.460000000e+02+1.470000000e+02+1.480000000e+02+1.490000000e+02\n"
            "        +1.500000000e+02+1.510000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX160 element definitions.", "[fem_element_ghex160]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX160;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex160 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX160 elements.", "[fem_element_ghex160]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex160 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex160 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.600000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex160 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.600000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex160 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.600000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex160 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.600000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex160 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.600000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.600000000e+02+3.000000000e+00\n"
            "        +1.250000000e+02+1.260000000e+02+1.270000000e+02+1.280000000e+02\n"
            "        +1.290000000e+02+1.300000000e+02+1.310000000e+02+1.320000000e+02\n"
            "        +1.330000000e+02+1.340000000e+02+1.350000000e+02+1.360000000e+02\n"
            "        +1.370000000e+02+1.380000000e+02+1.390000000e+02+1.400000000e+02\n"
            "        +1.410000000e+02+1.420000000e+02+1.430000000e+02+1.440000000e+02\n"
            "        +1.450000000e+02+1.460000000e+02+1.470000000e+02+1.480000000e+02\n"
            "        +1.490000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX161 element definitions.", "[fem_element_ghex161]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX161;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex161 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX161 elements.", "[fem_element_ghex161]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex161 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex161 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.610000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex161 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.610000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex161 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.610000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex161 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.610000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex161 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.610000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.610000000e+02+3.000000000e+00\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "        +1.460000000e+02+1.470000000e+02+1.480000000e+02+1.490000000e+02\n"
            "        +1.500000000e+02+1.510000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX162 element definitions.", "[fem_element_ghex162]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX162;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex162 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX162 elements.", "[fem_element_ghex162]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex162 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex162 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.620000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex162 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.620000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex162 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.620000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex162 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.620000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex162 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.620000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.620000000e+02+3.000000000e+00\n"
            "        +1.260000000e+02+1.270000000e+02+1.280000000e+02+1.290000000e+02\n"
            "        +1.300000000e+02+1.310000000e+02+1.320000000e+02+1.330000000e+02\n"
            "        +1.340000000e+02+1.350000000e+02+1.360000000e+02+1.370000000e+02\n"
            "        +1.380000000e+02+1.390000000e+02+1.400000000e+02+1.410000000e+02\n"
            "        +1.420000000e+02+1.430000000e+02+1.440000000e+02+1.450000000e+02\n"
            "        +1.460000000e+02+1.470000000e+02+1.480000000e+02+1.490000000e+02\n"
            "        +1.500000000e+02+1.510000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

TEST_CASE("FEM GHEX163 element definitions.", "[fem_element_ghex163]") {

    long const ELNOX = 1;
    long const ELNO = 2;
    elements::el_types const ELTYP = elements::el_types::GHEX163;
    long const ELTYAD = 2;
    vector<long> const NODIN ({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126});
    elements::__base::elem::reset();
    unique_ptr<cards::gelmnt1> gelmnt1_data(
        new cards::gelmnt1(
            ELNOX, ELNO, ELTYP, ELTYAD, NODIN));


    long const MATNO = 3;
    long const ADDNO = 4;
    long const INTNO = 5;
    long const MINTNO = 6;
    long const STRANO = 7;
    long const STRENO = 8;
    long const STREPONO = 9;
    long const GEONO_OPT = 10;
    long const FIXNO_OPT = 11;
    long const ECCNO_OPT = 12;
    long const TRANSNO_OPT = 13;

    unique_ptr<cards::gelref1> gelref1_data(
        new cards::gelref1(ELNO, MATNO, ADDNO, INTNO, MINTNO,
                           STRANO, STRENO, STREPONO, GEONO_OPT,
                           FIXNO_OPT, ECCNO_OPT, TRANSNO_OPT));

    elements::ghex163 probe(gelmnt1_data.get());
    probe.add(gelref1_data.get());

    SECTION("check members") {

        CHECK(probe.processors == set<elements::el_processor> ({
                    elements::el_processor::general, elements::el_processor::Sestra }));
        CHECK(probe.eleno == ELNOX);
        CHECK(probe.elident == ELNO);
        CHECK(probe.el_add == ELTYAD);
        CHECK(probe.nodes == NODIN);
        CHECK(probe.matref == MATNO);
        CHECK(probe.add_no == ADDNO);
        CHECK(probe.intno == INTNO);
        CHECK(probe.mass_intno == MINTNO);
        CHECK(probe.i_strain_ref == STRANO);
        CHECK(probe.i_stress_ref == STRENO);
        CHECK(probe.strpoint_ref == STREPONO);
        CHECK(probe.section == vector<long>(1, GEONO_OPT));
        CHECK(probe.fixations == vector<long>(1, FIXNO_OPT));
        CHECK(probe.eccentrities == vector<long>(1, ECCNO_OPT));
        CHECK(probe.csys == vector<long>(1, TRANSNO_OPT));
    }
}

TEST_CASE("Output for GHEX163 elements.", "[fem_element_ghex163]") {

    stringstream test;

    elements::__base::elem::reset();

    SECTION("simple (empty)") {
        elements::ghex163 probe;
        test << probe;
        CHECK(test.str() == "");
    }

    SECTION("check output") {
        elements::ghex163 probe(
            3,                    // elnox
            4,                    // elno
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+4.000000000e+00+1.630000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "GELREF1 +4.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("check output (default elno)") {
        elements::ghex163 probe(
            3,                    // elnox
            3,                    // eltyad
            vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126}), // nodin
            6,                    // matno
            7,                    // addno
            8,                    // intno
            9,                    // mintno
            10,                   // strano
            11,                   // streno
            12,                   // strepono
            vector<long>(1, 13),  // geono_opt
            vector<long>(1, 14),  // fixno_opt
            vector<long>(1, 15),  // eccno_opt
            vector<long>(1, 16)); // transno_opt

        test << probe;
        CHECK(test.str() ==
            "GELMNT1 +3.000000000e+00+1.000000000e+00+1.630000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output)") {
        elements::ghex163 probe;
        test << probe(7,                         // elnox
                      7,                         // elno
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+7.000000000e+00+1.630000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "GELREF1 +7.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno)") {
        elements::ghex163 probe;
        test << probe(7,                    //< elnox
                      3,                    //< eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126}),
                      //< nodin
                      6,                    //< matno
                      7,                    //< addno
                      8,                    //< intno
                      9,                    //< mintno
                      10,                   //< strano
                      11,                   //< streno
                      12,                   //< strepono
                      vector<long>(1, 13),  //< geono_opt
                      vector<long>(1, 14),  //< fixno_opt
                      vector<long>(1, 15),  //< eccno_opt
                      vector<long>(1, 16)); //< transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.630000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }

    SECTION("reuse (check output) (use default elno) multiple calls") {
        elements::ghex163 probe;
        test << probe(7,                         // elnox
                      3,                         // eltyad
                      vector<long>({100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        test << probe(8,                         // elnox
                      3,                         // eltyad
                      vector<long>({127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153}), // nodin
                      6,                         // matno
                      7,                         // addno
                      8,                         // intno
                      9,                         // mintno
                      10,                        // strano
                      11,                        // streno
                      12,                        // strepono
                      vector<long>(1, 13),  // geono_opt
                      vector<long>(1, 14),  // fixno_opt
                      vector<long>(1, 15),  // eccno_opt
                      vector<long>(1, 16)); // transno_opt
        CHECK(test.str() ==
            "GELMNT1 +7.000000000e+00+1.000000000e+00+1.630000000e+02+3.000000000e+00\n"
            "        +1.000000000e+02+1.010000000e+02+1.020000000e+02+1.030000000e+02\n"
            "        +1.040000000e+02+1.050000000e+02+1.060000000e+02+1.070000000e+02\n"
            "        +1.080000000e+02+1.090000000e+02+1.100000000e+02+1.110000000e+02\n"
            "        +1.120000000e+02+1.130000000e+02+1.140000000e+02+1.150000000e+02\n"
            "        +1.160000000e+02+1.170000000e+02+1.180000000e+02+1.190000000e+02\n"
            "        +1.200000000e+02+1.210000000e+02+1.220000000e+02+1.230000000e+02\n"
            "        +1.240000000e+02+1.250000000e+02+1.260000000e+02\n"
            "GELREF1 +1.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n"
            "GELMNT1 +8.000000000e+00+2.000000000e+00+1.630000000e+02+3.000000000e+00\n"
            "        +1.270000000e+02+1.280000000e+02+1.290000000e+02+1.300000000e+02\n"
            "        +1.310000000e+02+1.320000000e+02+1.330000000e+02+1.340000000e+02\n"
            "        +1.350000000e+02+1.360000000e+02+1.370000000e+02+1.380000000e+02\n"
            "        +1.390000000e+02+1.400000000e+02+1.410000000e+02+1.420000000e+02\n"
            "        +1.430000000e+02+1.440000000e+02+1.450000000e+02+1.460000000e+02\n"
            "        +1.470000000e+02+1.480000000e+02+1.490000000e+02+1.500000000e+02\n"
            "        +1.510000000e+02+1.520000000e+02+1.530000000e+02\n"
            "GELREF1 +2.000000000e+00+6.000000000e+00+7.000000000e+00+8.000000000e+00\n"
            "        +9.000000000e+00+1.000000000e+01+1.100000000e+01+1.200000000e+01\n"
            "        +1.300000000e+01+1.400000000e+01+1.500000000e+01+1.600000000e+01\n");
    }
}

// Local Variables:
// mode: c++
// coding: utf-8
// c-file-style: "dnvgl"
// indent-tabs-mode: nil
// compile-command: "make -C ../../cbuild -j8&&
//    (make -C ../../cbuild test;
//     ../../cbuild/tests/test_fem_elements --use-colour no)"
// End: